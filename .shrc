# My rc file for common bash and zsh setup

function pathappend {
    for arg in "$@"; do
        if [ -d "$arg" ] && [[ ":$PATH:" != *":$arg:"* ]]; then
            PATH="${PATH:+"$PATH:"}$arg"
        fi
    done
}

function pathprepend {
    for ((i=$#; i>0; i--)); do
        arg="${@:$i:1}"
        if [ -d "$arg" ] && [[ ":$PATH:" != *":$arg:"* ]]; then
            PATH="$arg${PATH:+":$PATH"}"
        fi
    done
}

if [ -d "$HOME/.pyenv" ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    pathprepend "$PYENV_ROOT/bin" "$PYENV_ROOT/shims"
fi

# Is this an ssh session?
# https://unix.stackexchange.com/a/9607/77627
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    export IS_SSH=true
else
    case $(ps -o comm= -p $PPID) in
        sshd|*/sshd) export IS_SSH=true ;;
    esac
fi

if [ -d "$HOME/.local/share/python-overrides" ]; then
    export PYTHONPATH="${PYTHONPATH:+"$PYTHONPATH:"}$HOME/.local/share/python-overrides"
fi

if [ -d "$HOME/.local/share/binaryninja" ]; then
    export PYTHONPATH="${PYTHONPATH:+"$PYTHONPATH:"}$HOME/.local/share/binaryninja/python:$HOME/.local/share/binaryninja/python3"
fi

if [ -d "$HOME/.local/share/binaryninja/plugins" ]; then
    export BINJA_PLUGINS="$HOME/.local/share/binaryninja/plugins"
fi

# COLORS

[ -f ~/.setcolors ] && ~/.setcolors
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'


# SETTINGS

alias gdb='gdb --quiet'
alias cp='cp --reflink=auto'

if [ $UID -eq 0 ]; then
    alias rm='rm -i'
    alias cp='cp -i --reflink=auto'
    alias mv='mv -i'
fi


# SHORT ALIASES

[ -f ~/.gitaliases ] && source ~/.gitaliases

alias ll='ls -lF'
alias la='ls -A'
alias lal='ls -alF'
alias l='ls -CF'
function path { echo "$PATH" | tr ':' '\n'; }

alias o='xdg-open'
alias c=clear
alias clip='xclip -selection clipboard'

alias sudo="sudo "

alias sc="sudo systemctl"
alias scu="systemctl --user"
alias jc="sudo journalctl"
alias jcu="journalctl --user"

alias ec='emacsclient'
alias ecc='emacsclient -c'
alias ecnc='emacsclient -nc'
sudoec () { SUDO_EDITOR=emacsclient sudoedit $@; }
sudoecc () { SUDO_EDITOR='emacsclient -c' sudoedit $@; }

setgov () { echo $1 | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; }
getgov () { cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; }

cputhrottle () {
    if [ $# -eq 0 ]; then
        cat /sys/devices/system/cpu/intel_pstate/max_perf_pct
    else
        echo $1 | sudo tee /sys/devices/system/cpu/intel_pstate/max_perf_pct
    fi
}

randpass () { head -c$(( ($1+1)/2 )) </dev/random | xxd -p | head -c$1 | sed -e 'a\'; }
urandpass () { head -c$(( ($1+1)/2 )) </dev/urandom | xxd -p | head -c$1 | sed     -e 'a\'; }

# http://www.bashoneliners.com/oneliners/oneliner/199/
alias randtext="tr -dc a-z1-5 </dev/urandom | tr 1-2 ' \n' | awk 'length==0 || length>50' | tr 3-5 ' ' | sed 's/^ *//' | cat -s | fmt"

ptrace_on () { echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope; }
ptrace_off () { echo 1 | sudo tee /proc/sys/kernel/yama/ptrace_scope; }

get_bytes_written () {
    local lbas_written_line="`sudo smartctl -x /dev/$1 | grep -i total_lbas_written`"
    if [[ -n $lbas_written_line ]]; then
        local lbas_written="`echo "$lbas_written_line" | python2 -c 'import sys; print sys.stdin.read().strip().split()[7]'`"
        local block_size="`cat /sys/block/$1/queue/hw_sector_size`"
        numfmt --to=iec-i --suffix=B --padding=7 $(( $lbas_written * $block_size ))
    fi
}

rot13 () { tr A-Za-z N-ZA-Mn-za-m ;}


function ifsniff {
    set -x;
    for iface in "$@"; do
        sudo ifconfig "$iface" down
        sudo ifconfig "$iface" hw ether 02:00:00:00:00:00
        sudo sysctl -w "net.ipv6.conf.$iface.disable_ipv6=1"
        sudo ifconfig "$iface" promisc -arp up
    done;
    { set +x; } 2>/dev/null
}


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'


# PATH

if [ -d "/usr/local/cuda" ]; then
   export CUDA_HOME="/usr/local/cuda"
   export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH:"}$CUDA_HOME/lib64:$CUDA_HOME/extras/CUPTI/lib64"
fi

if [ -f ~/.local/bin/virtualenvwrapper.sh ]; then
    source ~/.local/bin/virtualenvwrapper.sh
fi

if command -v pyenv >/dev/null; then
    emulate zsh -c 'eval "$(pyenv init -)"' 2>/dev/null || eval "$(pyenv init -)"
    emulate zsh -c 'eval "$(pyenv virtualenv-init -)"' 2>/dev/null || eval "$(pyenv virtualenv-init -)"
fi

if command -v ruby && ruby --version >/dev/null && command -v gem && gem --version >/dev/null; then
    pathprepend "$(ruby -r rubygems -e 'puts Gem.user_dir')/bin"
fi

pathprepend "$HOME/.poetry/bin:$PATH"
pathprepend "$HOME/.cabal/bin" "$HOME/.ghcup/bin"

# The next line updates PATH for the Google Cloud SDK.
if [ -f ~/google-cloud-sdk/path.zsh.inc ]; then . ~/google-cloud-sdk/path.zsh.inc; fi

# The next line enables shell command completion for gcloud.
if [ -f ~/google-cloud-sdk/completion.zsh.inc ]; then . ~/google-cloud-sdk/completion.zsh.inc; fi

# From http://paste.linux.chat/view/c86fbe5f (credit to CHVNX in freenode ##linux)
alias ga='git add'
alias gaa='git add --all'
alias gb='git branch'
alias gckct='git clone --filter blob:none'
alias gckc='git clone --filter tree:0'
alias gcd1='git clone --depth 1'
alias gc='git commit -v'
alias gcb='git checkout -b'
alias gcmsg='git commit -m'
alias gch='git checkout'
alias gd='git diff'
alias gdc='git diff --cached'
alias gf='git fetch'
alias glog='git log --oneline --decorate --color --graph'
alias gloga='git log --all --oneline --decorate --color --graph'
alias glol='git log --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --abbrev-commit'
alias glola='git log --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --abbrev-commit --all'
alias gp='git push'
alias gpo='git push origin'
alias gpom='git push origin master'
alias gr='git remote'
alias gra='git remote add'
alias grset='git remote set-url'
alias grt='cd $(y=$(git rev-parse --show-toplevel 2>/dev/null); echo ${y:-.})'
alias grv='git remote -v'
alias gs='git status -s'
alias gss='git status'

alias sc=systemctl
alias jc=journalctl
alias scu='systemctl --user'
alias jcu='journalctl --user'

alias db=dropbox-cli
